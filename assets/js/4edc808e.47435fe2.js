"use strict";(self.webpackChunkcodex_docs_docusaurus_template=self.webpackChunkcodex_docs_docusaurus_template||[]).push([[173],{92876:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>d,metadata:()=>s,toc:()=>p});var a=n(87462),i=n(67294),o=n(3905);const r=e=>{let{href:t,imgSrc:n,imgAlt:a=t,target:o="_blank",children:r,...d}=e;return i.createElement("a",d,i.createElement("img",{src:n,alt:a}))},d={sidebar_position:1,description:"Codex is building a decentralised durability storage engine"},l="Guides",s={unversionedId:"index",id:"index",title:"Guides",description:"Codex is building a decentralised durability storage engine",source:"@site/docs/index.mdx",sourceDirName:".",slug:"/",permalink:"/",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"Codex is building a decentralised durability storage engine"},sidebar:"defaultSidebar",next:{title:"Terms of Use",permalink:"/terms"}},c={},p=[{value:"Build and run",id:"build-and-run",level:2},{value:"CLI options",id:"cli-options",level:3},{value:"Example: Running two Codex clients",id:"example-running-two-codex-clients",level:3},{value:"Interacting with the client",id:"interacting-with-the-client",level:3},{value:"<code>/api/codex/v1/connect/{peerId}</code>",id:"apicodexv1connectpeerid",level:4},{value:"<code>/api/codex/v1/data/{id}/network</code>",id:"apicodexv1dataidnetwork",level:4},{value:"<code>/api/codex/v1/data</code>",id:"apicodexv1data",level:4},{value:"<code>/api/codex/v1/debug/info</code>",id:"apicodexv1debuginfo",level:4}],u={toc:p};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"guides"},"Guides"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The Codex project aims to create a decentralized durability engine that allows persisting data in p2p networks. In other words, it allows storing files and data with predictable durability guarantees for later retrieval.")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"WARNING: This project is under active development and is considered pre-alpha.")),(0,o.kt)(r,{className:"badge-margin",href:"https://opensource.org/licenses/Apache-2.0",imgSrc:"https://img.shields.io/badge/License-Apache%202.0-blue.svg",imgAlt:"License: Apache",mdxType:"Badge"}),(0,o.kt)(r,{className:"badge-margin",href:"https://opensource.org/licenses/MIT",imgSrc:"https://img.shields.io/badge/License-MIT-blue.svg",imgAlt:"License: MIT",mdxType:"Badge"}),(0,o.kt)(r,{className:"badge-margin",href:"https://img.shields.io/badge/stability-experimental-orange.svg",imgSrc:"https://img.shields.io/badge/stability-experimental-orange.svg",imgAlt:"Stability: experimental",mdxType:"Badge"}),(0,o.kt)(r,{className:"badge-margin",href:"https://github.com/codex-storage/nim-codex/actions/workflows/ci.yml?query=branch%3Amaster",imgSrc:"https://github.com/codex-storage/nim-codex/actions/workflows/ci.yml/badge.svg?branch=master",imgAlt:"CI",mdxType:"Badge"}),(0,o.kt)(r,{className:"badge-margin",href:"https://codecov.io/gh/codex-storage/nim-codex",imgSrc:"https://codecov.io/gh/codex-storage/nim-codex/branch/master/graph/badge.svg?token=XFmCyPSNzW",imgAlt:"Codecov",mdxType:"Badge"}),(0,o.kt)(r,{className:"badge-margin",href:"https://discord.gg/codex-storage",imgSrc:"https://img.shields.io/discord/895609329053474826",imgAlt:"Discord",mdxType:"Badge"}),(0,o.kt)("h2",{id:"build-and-run"},"Build and run"),(0,o.kt)("p",null,"For detailed instructions on preparing to build nim-codex see ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/codex-storage/nim-codex/blob/master/BUILDING.md"},(0,o.kt)("em",{parentName:"a"},"Building Codex")),"."),(0,o.kt)("p",null,"To build the project, clone it and run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"make update && make\n")),(0,o.kt)("p",null,"The executable will be placed under the ",(0,o.kt)("inlineCode",{parentName:"p"},"build")," directory under the project root."),(0,o.kt)("p",null,"Run the client with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"build/codex\n")),(0,o.kt)("h3",{id:"cli-options"},"CLI options"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"build/codex --help\nUsage:\n\ncodex [OPTIONS]... command\n\nThe following options are available:\n\n     --config-file          Loads the configuration from a TOML file [=none].\n     --log-level            Sets the log level [=info].\n     --metrics              Enable the metrics server [=false].\n     --metrics-address      Listening address of the metrics server [=127.0.0.1].\n     --metrics-port         Listening HTTP port of the metrics server [=8008].\n -d, --data-dir             The directory where codex will store configuration and data..\n -i, --listen-addrs         Multi Addresses to listen on [=/ip4/0.0.0.0/tcp/0].\n -a, --nat                  IP Addresses to announce behind a NAT [=127.0.0.1].\n -e, --disc-ip              Discovery listen address [=0.0.0.0].\n -u, --disc-port            Discovery (UDP) port [=8090].\n     --net-privkey          Source of network (secp256k1) private key file path or name [=key].\n -b, --bootstrap-node       Specifies one or more bootstrap nodes to use when connecting to the network..\n     --max-peers            The maximum number of peers to connect to [=160].\n     --agent-string         Node agent string which is used as identifier in network [=Codex].\n     --api-bindaddr         The REST API bind address [=127.0.0.1].\n -p, --api-port             The REST Api port [=8080].\n     --repo-kind            backend for main repo store (fs, sqlite) [=fs].\n -q, --storage-quota        The size of the total storage quota dedicated to the node [=8589934592].\n -t, --block-ttl            Default block timeout in seconds - 0 disables the ttl [=$DefaultBlockTtl].\n     --block-mi             Time interval in seconds - determines frequency of block maintenance cycle: how\n                            often blocks are checked for expiration and cleanup.\n                            [=$DefaultBlockMaintenanceInterval].\n     --block-mn             Number of blocks to check every maintenance cycle. [=1000].\n -c, --cache-size           The size in MiB of the block cache, 0 disables the cache - might help on slow\n                            hardrives [=0].\n     --persistence          Enables persistence mechanism, requires an Ethereum node [=false].\n     --eth-provider         The URL of the JSON-RPC API of the Ethereum node [=ws://localhost:8545].\n     --eth-account          The Ethereum account that is used for storage contracts [=EthAddress.none].\n     --eth-deployment       The json file describing the contract deployment [=string.none].\n     --validator            Enables validator, requires an Ethereum node [=false].\n     --validator-max-slots  Maximum number of slots that the validator monitors [=1000].\n\nAvailable sub-commands:\n\ncodex initNode\n")),(0,o.kt)("h3",{id:"example-running-two-codex-clients"},"Example: Running two Codex clients"),(0,o.kt)("p",null," For more information please see ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/codex-storage/nim-codex/blob/master/docs/TWOCLIENTTEST.md"},"Codex Two-Client Test"),"."),(0,o.kt)("h3",{id:"interacting-with-the-client"},"Interacting with the client"),(0,o.kt)("p",null," The client exposes a REST API that can be used to interact with the clients. These commands could be invoked with any HTTP client, however the following endpoints assume the use of the ",(0,o.kt)("inlineCode",{parentName:"p"},"curl")," command."),(0,o.kt)("p",null," For more information about API endpoints please see ",(0,o.kt)("a",{parentName:"p",href:"https://api.codex.storage/"},"api.codex.storage"),"."),(0,o.kt)("h4",{id:"apicodexv1connectpeerid"},(0,o.kt)("inlineCode",{parentName:"h4"},"/api/codex/v1/connect/{peerId}")),(0,o.kt)("p",null,"Connect to a peer identified by its peer id. Takes an optional ",(0,o.kt)("inlineCode",{parentName:"p"},"addrs")," parameter with a list of valid ",(0,o.kt)("a",{parentName:"p",href:"https://multiformats.io/multiaddr/"},"multiaddresses"),". If ",(0,o.kt)("inlineCode",{parentName:"p"},"addrs")," is absent, the peer will be discovered over the DHT."),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'curl "127.0.0.1:8080/api/codex/v1/connect/<PEER ID HERE>?addrs=/ip4/127.0.0.1/tcp/8071"\n')),(0,o.kt)("h4",{id:"apicodexv1dataidnetwork"},(0,o.kt)("inlineCode",{parentName:"h4"},"/api/codex/v1/data/{id}/network")),(0,o.kt)("p",null,"Download data identified by a ",(0,o.kt)("inlineCode",{parentName:"p"},"CID"),"."),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"curl 127.0.0.1:8080/api/codex/v1/data/<CID>/network -o <OUTPUT FILE>\n")),(0,o.kt)("h4",{id:"apicodexv1data"},(0,o.kt)("inlineCode",{parentName:"h4"},"/api/codex/v1/data")),(0,o.kt)("p",null,"Upload a file, upon success returns the ",(0,o.kt)("inlineCode",{parentName:"p"},"CID")," of the uploaded file."),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST 127.0.0.1:8080/api/codex/v1/data -H "content-type: application/octet-stream" -H "Expect: 100-continue" -T "<FILE PATH>"\n\n')),(0,o.kt)("h4",{id:"apicodexv1debuginfo"},(0,o.kt)("inlineCode",{parentName:"h4"},"/api/codex/v1/debug/info")),(0,o.kt)("p",null,"Get useful node info such as its peer id, address, and SPR."),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"curl 127.0.0.1:8080/api/codex/v1/info\n")))}m.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),u=s(n),m=i,h=u["".concat(l,".").concat(m)]||u[m]||p[m]||o;return n?a.createElement(h,r(r({ref:t},c),{},{components:n})):a.createElement(h,r({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=u;var d={};for(var l in t)hasOwnProperty.call(t,l)&&(d[l]=t[l]);d.originalType=e,d.mdxType="string"==typeof e?e:i,r[1]=d;for(var s=2;s<o;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);